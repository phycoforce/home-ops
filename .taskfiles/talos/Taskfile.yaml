---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALOS_MACHINE_FILE: '{{.TALOS_DIR}}/machineconfig.yaml.j2'

tasks:
  apply-node:
    desc: Apply Talos config to a node [NODE=required] [MODE=auto]
    cmd: |-
      minijinja-cli --define "machinetype={{.MACHINE_TYPE}}" {{.TALOS_DIR}}/machineconfig.yaml.j2 | op inject \
        | talosctl --nodes {{.NODE}} apply-config \
          --mode {{.MODE}} \
          --config-patch @{{.TALOS_DIR}}/{{.MACHINE_TYPE}}/{{.NODE}}.yaml \
          --file /dev/stdin {{if .INSECURE}}--insecure{{end}}
    vars:
      MODE: '{{.MODE | default "auto"}}'
      INSECURE:
        sh: talosctl --nodes {{.NODE}} get machineconfig &> /dev/null || echo true
      MACHINE_TYPE:
        sh: |-
          talosctl --nodes "${NODE}" get machinetypes --output=jsonpath='{.spec}' 2>/dev/null \
            || basename "$(find "${TALOS_DIR}" -name "${NODE}.yaml" -exec dirname {} \;)"
    requires:
      vars: [NODE]
    preconditions:
      - op whoami --format=json
      - talosctl config info
      - test -f {{.TALOS_DIR}}/machineconfig.yaml.j2
      - test -f {{.TALOS_DIR}}/{{.MACHINE_TYPE}}/{{.NODE}}.yaml
      - which curl jq minijinja-cli op talosctl

  upgrade-node:
    desc: Upgrade Talos on a single node [NODE=required]
    cmds:
      - task: apply-node
      - talosctl --nodes {{.NODE}} upgrade --image={{.TALOS_IMAGE}} --timeout=10m
    vars:
      MACHINE_TYPE:
        sh: talosctl --nodes {{.NODE}} get machinetypes --output=jsonpath='{.spec}'
      TALOS_IMAGE:
        sh: |-
          talosctl --nodes {{.NODE}} get machineconfig --output=jsonpath='{.spec}' \
            | yq '.machine.install.image | select(. != null)'
    requires:
      vars: [NODE]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which minijinja-cli talosctl yq

  upgrade-k8s:
    desc: Upgrade Kubernetes across the whole cluster
    cmd: talosctl --nodes {{.RANDOM_CONTROLLER}} upgrade-k8s --to {{.VERSION}}
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output yaml | yq --exit-status '.endpoints[0]'
    requires:
      vars: [VERSION]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - which jq talosctl

  reset-node:
    desc: Reset a node [NODE=required]
    prompt: Reset Talos node '{{.NODE}}' ... continue?
    cmd: talosctl reset --nodes {{.NODE}} --graceful=false #--user-disks-to-wipe u-local-hostpath
    requires:
      vars: [NODE]
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl

  reset-cluster:
    desc: Reset Talos across the whole cluster
    prompt: Reset the Talos cluster ... continue?
    cmd: talosctl reset --nodes {{.NODES}} --graceful=false #--user-disks-to-wipe u-local-hostpath
    vars:
      NODES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODES}} get machineconfig
      - which jq talosctl

  generate-kubeconfig:
    desc: Generate the kubeconfig for a Talos cluster
    cmd: talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force {{.KUBERNETES_DIR}}
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - which jq talosctl

  generate-iso:
    desc: Generate a Talos ISO for a specific version [VERSION=required]
    cmd: |
      curl -o {{.TALOS_DIR}}/talos-{{.VERSION}}.iso \
          https://factory.talos.dev/image/{{.TALOS_SCHEMATIC}}/{{.VERSION}}/metal-amd64.iso
    vars:
      TALOS_SCHEMATIC:
        sh: task --silent talos:generate-schematic ISO=true
    requires:
      vars: [VERSION]
    preconditions:
      - which curl task

  generate-schematic:
    desc: Generate a Talos schematic [ISO=false]
    cmd: |
      minijinja-cli --define "iso={{.ISO}}" {{.TALOS_DIR}}/schematic.yaml \
        | curl --silent -X POST --data-binary @- https://factory.talos.dev/schematics \
        | jq --raw-output '.id'
    vars:
      ISO: '{{.ISO | default false}}'
    preconditions:
      - test -f {{.TALOS_DIR}}/schematic.yaml
      - which curl jq minijinja-cli

