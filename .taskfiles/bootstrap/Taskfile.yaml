---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:
  talos:
    cmds:
      - task: kubernetes
      - task: apps
    preconditions:
      - op whoami --format=json
      - test -f {{.BOOTSTRAP_DIR}}/resources.yaml.tpl
      - which kubectl op

  kubernetes:
    desc: Bootstrap Talos
    cmds:
      - until talosctl --nodes {{.RANDOM_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force-context-name main --force {{.KUBECONFIG}}
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output yaml | yq --exit-status '.endpoints[0]'
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - which yq talosctl

  apps:
    desc: Bootstrap Kubernetes Apps
    cmds:
      - kubectl config set-cluster {{.CONTEXT}} --server https://{{.RANDOM_CONTROLLER}}:6443
      - defer: talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force-context-name main --force {{.KUBECONFIG}}
      - until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - op inject --in-file {{.BOOTSTRAP_DIR}}/resources.yaml.tpl | op inject | kubectl apply --server-side --filename -
      - helmfile --file {{.BOOTSTRAP_DIR}}/crds/helmfile.yaml template  | kubectl apply --server-side --filename -
      - helmfile --file {{.BOOTSTRAP_DIR}}/helmfile.yaml sync --hide-notes
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output yaml | yq --exit-status '.endpoints[0]'
      CONTEXT:
        sh: talosctl config info --output json | jq --raw-output '.context'
    preconditions:
      - op whoami
      - test -f {{.BOOTSTRAP_DIR}}/helmfile.yaml
      - test -f {{.BOOTSTRAP_DIR}}/resources.yaml.tpl
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - which yq kubectl talosctl op
